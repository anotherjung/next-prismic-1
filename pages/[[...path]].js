import Head from 'next/head'
import { SliceZone, PrismicText, PrismicRichText } from '@prismicio/react'
import { createClient } from '../prismicio'
import { components } from '../slices'
import styled from 'styled-components';
import tw from "tailwind-styled-components"


const Title = tw.h1`
  text-2xl text-green-700
`;
const Subtitle = tw.h2`
  text-xl text-blue-600
`;

const Main= tw.div`
flex-grow flex flex-col justify-center max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8
`
const Hero=tw.div`flex-shrink-0 flex justify-center`

const Wrapper = tw.div`flex h-screen justify-center items-center`

export default function Index({ page }) {
  return (
    <Wrapper>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
      <Hero>
      <Title>
          <PrismicText field={page.data.greeting} />
        </Title>
      </Hero>
      <Hero>
      <Subtitle>
          <PrismicRichText field={page.data.description} />
        </Subtitle>
      </Hero>


        <SliceZone
          slices={page.data.slices}
          components={components}
        />
      </Main>

    </Wrapper>
  )
}


// pages/[[...path]].js, bottom of the file

// This function fetches the Page document from the CMS.
// The document is passed to the page as a prop.
export async function getStaticProps({ params }) {
  // Client used to fetch CMS content.
  const client = createClient();

  // Page document from the CMS.
  const uid = params.path?.[params.path?.length - 1] || "index";
  const page = await client.getByUID("page", uid);

  // Pass the document as prop to our page.
  return {
    props: { page },
    revalidate: 60, // In seconds
  };
}

// This function tells Next.js which URLs to accept.
// Each Page document from the CMS will be given a URL.
export async function getStaticPaths() {
  // Client used to fetch CMS content.
  const client = createClient();

  // Page documents from the CMS.
  const pages = await client.getAllByType("page");

  // URL paths for each Page document from the CMS.
  return {
    paths: pages.map((page) => ({
      params: {
        path: page.uid === "index" ? [] : [page.uid],
      },
    })),
    fallback: false,
  };
}